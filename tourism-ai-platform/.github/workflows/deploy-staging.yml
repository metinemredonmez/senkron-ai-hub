name: Deploy Staging

on:
  push:
    branches: ["main"]
    paths:
      - "backend/**"
      - "ai-services/**"
      - "infrastructure/**"
      - ".github/workflows/deploy-staging.yml"
  workflow_dispatch:

env:
  REGISTRY_HOST: ghcr.io
  REGISTRY_NAMESPACE: ${{ github.repository_owner }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/tourism-backend:${{ github.sha }}
  AI_SERVICES_IMAGE: ghcr.io/${{ github.repository_owner }}/tourism-ai-services:${{ github.sha }}
  STAGING_BACKEND_APP: backend-staging
  STAGING_AI_APP: ai-services-staging

jobs:
  build-backend:
    name: Build & Push Backend
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build & Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: backend/Dockerfile
          target: production
          push: true
          tags: ${{ env.BACKEND_IMAGE }}
          build-args: |
            NODE_VERSION=18-alpine

  build-ai-services:
    name: Build & Push AI Orchestrator
    runs-on: ubuntu-latest
    needs: build-backend
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_HOST }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build & Push AI Orchestrator Image
        uses: docker/build-push-action@v5
        with:
          context: ai-services/orchestrator-svc
          file: ai-services/orchestrator-svc/Dockerfile
          push: true
          tags: ${{ env.AI_SERVICES_IMAGE }}

  deploy:
    name: Trigger ArgoCD Sync (Staging)
    runs-on: ubuntu-latest
    needs:
      - build-backend
      - build-ai-services
    permissions:
      contents: read
    env:
      ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
      ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
      ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
    steps:
      - name: Download ArgoCD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd

      - name: Login to ArgoCD
        run: ./argocd login "$ARGOCD_SERVER" --username "$ARGOCD_USERNAME" --password "$ARGOCD_PASSWORD" --insecure

      - name: Update Backend Image Tag
        run: ./argocd app set ${{ env.STAGING_BACKEND_APP }} --parameter image.tag=${{ github.sha }}

      - name: Update AI Services Image Tag
        run: ./argocd app set ${{ env.STAGING_AI_APP }} --parameter image.tag=${{ github.sha }}

      - name: Sync Applications
        run: |
          ./argocd app sync ${{ env.STAGING_BACKEND_APP }}
          ./argocd app sync ${{ env.STAGING_AI_APP }}

      - name: Wait for Healthy State
        run: |
          ./argocd app wait ${{ env.STAGING_BACKEND_APP }} --health --timeout 600
          ./argocd app wait ${{ env.STAGING_AI_APP }} --health --timeout 600
